---
title: "AD_dataset_exploration"
format: html
author: "Maaike Kessen"
editor: visual
---

# Alzheimerâ€™s disease analysis: data exploration

This notebook is the second of 3 needed for this analysis. It explores the cleaned data by visualizing it using boxplots and barplots. At the end, a PCA analysis is performed.

```{r}
#list all required packages
packages <- c(
  "ggplot2", "caret", "tidyverse", "dplyr",
  "pROC", "broom", "gt", "randomForest", "glmnet"
)

#check which are not installed and install them automatically
installed <- packages %in% rownames(installed.packages())
if (any(!installed)) {
  cat("Installing missing packages:\n")
  install.packages(packages[!installed], dependencies = TRUE)
}

#load all packages
invisible(lapply(packages, library, character.only = TRUE))
```

```{r}
#set the working directory
#(change this path to match your local device)
setwd("C:/Users/Maaike/Documents/uni/scientific programming/assignment/ScientificProgrammingAssignment")

# Read the cleaned CSV produced by the cleaning script
# (write.csv creates comma-separated files)
df <- read.csv(
  file = "cleaned_alzheimers_dataset.csv",
  header = TRUE,
  sep = ",",          
  na.strings = "NA",    # write.csv writes NA as "NA" by default
  stringsAsFactors = FALSE
)

#sanity check
str(df)
summary(df)
```

## Define variable blocks

In the code below, I define some blocks that are used later in the analysis, therefore getting rid of redundancies.

```{r}
cognitive_vars <- c("MMSE", "ADL", "FunctionalAssessment")
clinical_vars  <- c("Age", "Gender", "Hypertension", "Diabetes", "Depression")
lifestyle_vars <- c("PhysicalActivity", "DietQuality", "SleepQuality", "AlcoholConsumption")
symptom_vars   <- c("MemoryComplaints", "BehavioralProblems", "Confusion",
                    "Disorientation", "PersonalityChanges", "Forgetfulness",
                    "DifficultyCompletingTasks")

#create a named list for easy iteration in later analyses
blocks <- list(
  Cognitive  = cognitive_vars,
  Clinical   = clinical_vars,
  Lifestyle  = lifestyle_vars,
  Symptoms   = symptom_vars
)
```

## Exploratory Data Visualization: Boxplots and Barplots

In this section, I provide a first visualexploration of the dataset.

-   Boxplots for numeric variables help assess their distribution and identify potential outliers.

-   Barplots for categorical variables give an overview of class balance and category frequencies.

Together, these visual checks confirm that the dataset is well-structured and suitable for statistical modeling.

```{r}
#numeric variables: boxplots 
numeric_vars <- c("Age", "BMI", "AlcoholConsumption", "PhysicalActivity",
                  "DietQuality", "SleepQuality", "SystolicBP", "DiastolicBP",
                  "CholesterolTotal", "CholesterolLDL", "CholesterolHDL",
                  "CholesterolTriglycerides", "MMSE", "FunctionalAssessment", "ADL")

#only keep variables that exist in the dataset
numeric_vars <- intersect(numeric_vars, names(df))

#create boxplots to inspect distributions and detect potential outliers
for (var in numeric_vars) {
  boxplot(df[[var]],
          main = paste("Boxplot of", var),
          ylab = var,
          col = "lightblue",
          border = "gray40")
}

#categorical variables: barplots 
cat_vars <- c("Gender", "Ethnicity", "EducationLevel", "Smoking",
              "FamilyHistoryAlzheimers", "CardiovascularDisease", "Diabetes",
              "Depression", "HeadInjury", "Hypertension", "MemoryComplaints",
              "BehavioralProblems", "Confusion", "Disorientation", "PersonalityChanges",
              "DifficultyCompletingTasks", "Forgetfulness", "Diagnosis")

#only include columns that exist in the dataset
cat_vars <- intersect(cat_vars, names(df))

#create barplots to visualize class balance and categorical distributions
for (var in cat_vars) {
  barplot(table(df[[var]]),
          main = paste("Barplot of", var),
          xlab = var,
          ylab = "Count",
          col = "lightgreen",
          border = "gray40")
}
```

## Exploratory visualization by diagnosis

This plot shows how often Alzheimer's-related symptoms occur in patients with and without a diagnosis. The symptoms 'behavioral problems' and 'memory complaints' appear to be more frequent in AD patients.

```{r}
#use symptom block
symptom_vars <- intersect(blocks$Symptoms, names(df))

#summarize proportion of "Yes" responses for each symptom variable per diagnosis group
symptom_summary <- df %>%
  group_by(Diagnosis) %>%
  summarise(across(all_of(symptom_vars), ~ mean(.x == "Yes", na.rm = TRUE))) %>%
  pivot_longer(-Diagnosis, names_to = "Symptom", values_to = "Proportion")

#visualize symptom prevalence differences between AD and No AD
ggplot(symptom_summary, aes(x = Symptom, y = Proportion, fill = Diagnosis)) +
  geom_col(position = "dodge") +
  scale_fill_manual(values = c("No AD" = "#E69F00", "AD" = "#56B4E9")) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 30, hjust = 1)) +
  labs(title = "Symptom Prevalence by Diagnosis",
       x = "Symptom", y = "Proportion of Patients", fill = "Diagnosis")
```

These boxplots compare lifestyle and clinical factors between groups. There does not seem to be a separation between the AD and no-AD group, suggesting that these features have limited predictive power.

```{r}
#define all continuous (numeric) lifestyle + clinical variables
continuous_vars <- c(
  "Age", "BMI", "AlcoholConsumption", "PhysicalActivity", "DietQuality",
  "SleepQuality", "SystolicBP", "DiastolicBP", "CholesterolTotal",
  "CholesterolLDL", "CholesterolHDL", "CholesterolTriglycerides"
)

#keep only those that exist in the dataset
continuous_vars <- intersect(continuous_vars, names(df))

#reshape for plotting
df_long <- df %>%
  select(Diagnosis, all_of(continuous_vars)) %>%
  pivot_longer(-Diagnosis, names_to = "Variable", values_to = "Value")

#create boxplots
ggplot(df_long, aes(x = Diagnosis, y = Value, fill = Diagnosis)) +
  geom_boxplot(alpha = 0.6, outlier.size = 0.8) +
  scale_fill_manual(values = c("No AD" = "#E69F00", "AD" = "#56B4E9")) +
  facet_wrap(~ Variable, scales = "free_y", ncol = 3) +
  theme_minimal() +
  labs(
    title = "Continuous Lifestyle and Clinical Variables by Diagnosis",
    subtitle = "Distributions of key continuous variables across AD and No AD groups",
    x = "Diagnosis", y = "Value", fill = "Diagnosis"
  )
```

Here, cognitive and functional test scores are compared between groups. AD patients consistently score below clinical cut-offs (red dashed lines), confirming these are the most discriminative features. Interestingly, the no-AD group also has quite some scores below the clinical cut-off, indicating that these are not healthy controls.

```{r}
#reshape cognitive data 
df_cog <- df %>%
  select(Diagnosis, all_of(blocks$Cognitive)) %>%
  pivot_longer(-Diagnosis, names_to = "Variable", values_to = "Value")

#compute median scores per group for annotation
meds <- df_cog %>%
  group_by(Diagnosis, Variable) %>%
  summarise(median_val = median(Value, na.rm = TRUE), .groups = "drop")

#define known clinical cut-offs for each test
cutoffs <- data.frame(
  Variable = c("MMSE", "FunctionalAssessment", "ADL"),
  cutoff = c(24, 7, 7)
)

#boxplot visualization
ggplot(df_cog, aes(x = Diagnosis, y = Value, fill = Diagnosis)) +
  geom_boxplot(alpha = 0.6, outlier.size = 0.8) +
  geom_text(
    data = meds,
    aes(x = Diagnosis, y = median_val, label = round(median_val, 1)),
    color = "black", vjust = -0.7, size = 3.5, inherit.aes = FALSE
  ) +
  geom_hline(
    data = cutoffs, aes(yintercept = cutoff),
    linetype = "dashed", color = "red"
  ) +
  facet_wrap(~ Variable, scales = "free_y", ncol = 3) +
  scale_fill_manual(values = c("No AD" = "#E69F00", "AD" = "#56B4E9")) +
  theme_minimal() +
  labs(
    title = "Cognitive and Functional Scores by Diagnosis",
    subtitle = "Red dashed line = clinical cut-off; medians annotated",
    x = "Diagnosis", y = "Score", fill = "Diagnosis"
  )
```

## Principal component analysis (PCA) on numeric variables

In this section, I apply a Principal Component Analysis (PCA) to all numeric variables to explore overall structure and relationships in the dataset. The data were centered and scaled, making sure that the variables measured on different scales contribute equally to the analysis.

The scree plot shows the variance explained by each principal component, helping identify how many components capture meaningful information.

\
The PCA scatter plot, colored by diagnosis, shows whether AD and no-AD participants separate based on underlying variable combinations. Unfortunately, no clear clustering can be seen.

```{r}
#step 1: prepare numeric data for PCA 
#select only numeric variables and remove identifiers/outcome variable
num_df <- df[, sapply(df, is.numeric), drop = FALSE]
if ("PatientID" %in% names(num_df)) num_df$PatientID <- NULL
if ("Diagnosis" %in% names(num_df)) num_df$Diagnosis <- NULL

#step 2: perform PCA on standardized data 
#center and scale variables to equalize their contribution
pca_res <- prcomp(num_df, center = TRUE, scale. = TRUE)

#step 3: examine explained variance 
summary(pca_res)
plot(pca_res, type = "l", main = "Scree Plot")

#step 4: visualize PCA results by diagnosis 
pca_df <- data.frame(pca_res$x,
                     Diagnosis = factor(df$Diagnosis, levels = c("No AD", "AD")))

ggplot(pca_df, aes(x = PC1, y = PC2, color = Diagnosis)) +
  geom_point(alpha = 0.6, size = 2) +
  theme_minimal() +
  scale_color_manual(values = c("No AD" = "#E69F00", "AD" = "#56B4E9")) +
  labs(title = "PCA: PC1 vs PC2",
       subtitle = "Colored by Alzheimer's Diagnosis",
       color = "Diagnosis")

#step 5: identify key contributing variables 
#extract variable loadings and identify top contributors to PC1 and PC2
loadings <- as.data.frame(pca_res$rotation)
loadings$Variable <- rownames(loadings)

top_PC1 <- loadings[order(abs(loadings$PC1), decreasing = TRUE), c("Variable", "PC1")][1:10, ]
top_PC2 <- loadings[order(abs(loadings$PC2), decreasing = TRUE), c("Variable", "PC2")][1:10, ]

cat("Top contributors to PC1:\n"); print(top_PC1)
cat("Top contributors to PC2:\n"); print(top_PC2)

#step 6: visualize top loadings for interpretation 
ggplot(top_PC1, aes(x = reorder(Variable, PC1), y = PC1)) +
  geom_col(fill = "steelblue") +
  coord_flip() +
  theme_minimal() +
  labs(title = "Top 10 Variable Loadings on PC1", x = NULL, y = "Loading")

ggplot(top_PC2, aes(x = reorder(Variable, PC2), y = PC2)) +
  geom_col(fill = "tomato") +
  coord_flip() +
  theme_minimal() +
  labs(title = "Top 10 Variable Loadings on PC2", x = NULL, y = "Loading")
```
