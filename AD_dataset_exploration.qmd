---
title: "AD_dataset_exploration"
format: html
author: "Maaike Kessen"
editor: visual
---

# Alzheimerâ€™s disease analysis: data exploration

```{r}
#list all required packages
packages <- c(
  "ggplot2", "caret", "tidyverse", "dplyr",
  "pROC", "broom", "gt", "randomForest", "glmnet"
)

#check which are not installed and install them automatically
installed <- packages %in% rownames(installed.packages())
if (any(!installed)) {
  cat("Installing missing packages:\n")
  install.packages(packages[!installed], dependencies = TRUE)
}

#load all packages
invisible(lapply(packages, library, character.only = TRUE))
```

```{r}
#set the working directory
#(change this path to match your local device)
setwd("C:/Users/Maaike/Documents/uni/scientific programming/assignment/ScientificProgrammingAssignment")

#load the Alzheimer's dataset
# - use ";" as the separator
# - convert various NA indicators (NaN, N/A, blanks) into proper NA values
# - ensure decimals are correctly interpreted
df <- read.csv(
  "cleaned_alzheimers_dataset.csv",
  sep = ";",
  header = TRUE,
  na.strings = c("NaN", "nan", "Nan", "NA", "N/A", "", " "),
  dec = "."
)

#inspect the dataset structure: variable types and first few entries
str(df)

#check for missing values per column
cat("----- Missing values per column -----\n")
print(colSums(is.na(df)))

#display descriptive summary statistics for all variables
cat("----- Summary statistics -----\n")
print(summary(df, maxsum = 10))
```

## Define variable blocks 

In the code below, I define some blocks that are used later in the analysis, therefore getting rid of redundancies.

```{r}
cognitive_vars <- c("MMSE", "ADL", "FunctionalAssessment")
clinical_vars  <- c("Age", "Gender", "Hypertension", "Diabetes", "Depression")
lifestyle_vars <- c("PhysicalActivity", "DietQuality", "SleepQuality", "AlcoholConsumption")
symptom_vars   <- c("MemoryComplaints", "BehavioralProblems", "Confusion",
                    "Disorientation", "PersonalityChanges", "Forgetfulness",
                    "DifficultyCompletingTasks")

#create a named list for easy iteration in later analyses
blocks <- list(
  Cognitive  = cognitive_vars,
  Clinical   = clinical_vars,
  Lifestyle  = lifestyle_vars,
  Symptoms   = symptom_vars
)
```

## Exploratory Data Visualization: Boxplots and Barplots

In this section, I provide a first visualexploration of the dataset.

-   Boxplots for numeric variables help assess their distribution and identify potential outliers.

-   Barplots for categorical variables give an overview of class balance and category frequencies.

Together, these visual checks confirm that the dataset is well-structured and suitable for statistical modeling.

```{r}
#numeric variables: boxplots 
numeric_vars <- c("Age", "BMI", "AlcoholConsumption", "PhysicalActivity",
                  "DietQuality", "SleepQuality", "SystolicBP", "DiastolicBP",
                  "CholesterolTotal", "CholesterolLDL", "CholesterolHDL",
                  "CholesterolTriglycerides", "MMSE", "FunctionalAssessment", "ADL")

#only keep variables that exist in the dataset
numeric_vars <- intersect(numeric_vars, names(df))

#create boxplots to inspect distributions and detect potential outliers
for (var in numeric_vars) {
  boxplot(df[[var]],
          main = paste("Boxplot of", var),
          ylab = var,
          col = "lightblue",
          border = "gray40")
}

#categorical variables: barplots 
cat_vars <- c("Gender", "Ethnicity", "EducationLevel", "Smoking",
              "FamilyHistoryAlzheimers", "CardiovascularDisease", "Diabetes",
              "Depression", "HeadInjury", "Hypertension", "MemoryComplaints",
              "BehavioralProblems", "Confusion", "Disorientation", "PersonalityChanges",
              "DifficultyCompletingTasks", "Forgetfulness", "Diagnosis")

#only include columns that exist in the dataset
cat_vars <- intersect(cat_vars, names(df))

#create barplots to visualize class balance and categorical distributions
for (var in cat_vars) {
  barplot(table(df[[var]]),
          main = paste("Barplot of", var),
          xlab = var,
          ylab = "Count",
          col = "lightgreen",
          border = "gray40")
}
```
